df$id <- 1:nrow(df)
plot <- ggplot(df, aes(x=id, y=time_diff)) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
labs(y = "Months", x = NULL, title = "Example") +
scale_x_discrete(breaks=NULL, labels = "") +
theme_bw() +
theme(panel.border = element_blank(),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 11),
legend.position = c(1, 1),
legend.justification = c(1,1),
plot.title = element_text(size = 11)) +
scale_y_continuous(breaks = round(seq(min(df$time_diff), max(df$time_diff), 12)))
plot
server <- function(input, output) {
output$search_ret <- renderText({
#     as.character(uncodes[grep(input$search_word, uncodes$V3, ignore.case = TRUE), 1:3])
paste("wtf", input$search_word, sep = "")
})
}
ui <- fluidPage(
mainPanel(
textInput(inputId = "search_word", label = "Search UN codes for...", value = ""),
textOutput("search_ret"),
submitButton("Submit")
)
)
shinyApp(ui = ui, server = server)
library(shiny)
server <- function(input, output) {
output$search_ret <- renderText({
#     as.character(uncodes[grep(input$search_word, uncodes$V3, ignore.case = TRUE), 1:3])
paste("wtf", input$search_word, sep = "")
})
}
ui <- fluidPage(
mainPanel(
textInput(inputId = "search_word", label = "Search UN codes for...", value = ""),
textOutput("search_ret"),
submitButton("Submit")
)
)
shinyApp(ui = ui, server = server)
?ernderTable
?renderTable
?tableOutput
uncodes <- read.csv("~/Documents/World\ Bank/codebase/UNSPSC code translation/UNSPSC v171001.csv", header = FALSE, encoding = "UTF-8")
server <- function(input, output) {
output$search_results <- renderTable({
uncodes[grep(input$search_word, uncodes$V3, ignore.case = TRUE), 1:3]
})
}
ui <- fluidPage(
mainPanel(
textInput(inputId = "search_word", label = "Search UN codes for...", value = ""),
tableOutput("search_results"),
submitButton("Submit")
)
)
shinyApp(ui = ui, server = server)
uncodes$V3 <- gsub("\\\\", " ", uncodes$V3)
uncodes[2984, ]
uncodes$V3 <- gsub("\\", " ", uncodes$V3)
uncodes$V3 <- gsub("\\\\xe", " ", uncodes$V3)
uncodes[2984, ]
uncodes$V3 <- gsub("\\\\x", " ", uncodes$V3)
uncodes[2984, ]
uncodes$V3 <- gsub("\\", "", uncodes$V3, fixed = TRUE)
uncodes$V3 <- gsub("\\\\", "", uncodes$V3, fixed = TRUE)
uncodes <- read.csv("~/Documents/World\ Bank/codebase/UNSPSC code translation/UNSPSC v171001.csv", header = FALSE, encoding = "UTF-8")
uncodes[2984, ]
uncodes$V3 <- gsub("\\\\", "", uncodes$V3, fixed = TRUE)
?iconv
uncodes$V3 <- iconv(uncodes$V3, "\x", "",)
test <- gsub("\x", "", uncodes$V3)
test <- gsub("\\x", "", uncodes$V3)
test[2984]
test <- gsub("\\\x", "", uncodes$V3)
test <- gsub("\\\\x", "", uncodes$V3)
test[2984]
test <- gsub("\x", "", uncodes$V3, fixed = TRUE)
test <- gsub("\\x", "", uncodes$V3, fixed = TRUE)
rm(list=ls())
uncodes <- read.csv("~/Documents/World\ Bank/codebase/UNSPSC code translation/UNSPSC v171001new.csv", header = FALSE, encoding = "UTF-8")
uncodes <- read.csv("~/Documents/World\ Bank/codebase/UNSPSC code translation/UNSPSC v171001new.csv", header = FALSE, encoding = "UTF-8")
uncodes[2984, ]
library(shiny)
server <- function(input, output) {
output$search_results <- renderTable({
uncodes[grep(input$search_word, uncodes$V3, ignore.case = TRUE), 1:3]
})
}
ui <- fluidPage(
mainPanel(
textInput(inputId = "search_word", label = "Search UN codes for...", value = ""),
tableOutput("search_results"),
submitButton("Submit")
)
)
shinyApp(ui = ui, server = server)
rm(list=ls())
library(shiny)
uncodes <- read.csv("~/Documents/World\ Bank/codebase/UNSPSC code translation/UNSPSC v171001new.csv", header = FALSE, encoding = "UTF-8")
# test <- gsub("\x", "", uncodes$V3)
server <- function(input, output) {
output$search_results <- renderTable({
uncodes[grep(input$search_word, uncodes$V3, ignore.case = TRUE), 1:3]
})
}
ui <- fluidPage(
mainPanel(
textInput(inputId = "search_word", label = "Search UN codes for...", value = ""),
tableOutput("search_results"),
submitButton("Submit")
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
reactive({
resultsdf <- uncodes[grep(input$search_word, uncodes$V3, ignore.case = TRUE), 1:3]
})
output$search_results <- renderTable({
resultsdf
})
}
ui <- fluidPage(
mainPanel(
textInput(inputId = "search_word", label = "Search UN codes for...", value = ""),
tableOutput("search_results"),
submitButton("Submit")
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
observe({
resultsdf <- uncodes[grep(input$search_word, uncodes$V3, ignore.case = TRUE), 1:3]
})
output$search_results <- renderTable({
resultsdf
})
}
ui <- fluidPage(
mainPanel(
textInput(inputId = "search_word", label = "Search UN codes for...", value = ""),
tableOutput("search_results"),
submitButton("Submit")
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
if(input$search_word != ""){
resultsdf <- reactive({
uncodes[grep(input$search_word, uncodes$V3, ignore.case = TRUE), 1:3]
})
output$search_results <- renderTable({
resultsdf()
})
}
}
ui <- fluidPage(
mainPanel(
textInput(inputId = "search_word", label = "Search UN codes for...", value = ""),
tableOutput("search_results"),
submitButton("Submit")
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
observe({
if(input$submitbtn == o){
return()
}else{
output$search_results <- renderTable({
uncodes[grep(input$search_word, uncodes$V3, ignore.case = TRUE), 1:3]
})
}
})
}
ui <- fluidPage(
mainPanel(
textInput(inputId = "search_word", label = "Search UN codes for...", value = ""),
tableOutput("search_results"),
actionButton("submitbtn", "Submit")
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
observe({
if(input$submitbtn == 0){
return()
}else{
output$search_results <- renderTable({
uncodes[grep(input$search_word, uncodes$V3, ignore.case = TRUE), 1:3]
})
}
})
}
ui <- fluidPage(
mainPanel(
textInput(inputId = "search_word", label = "Search UN codes for...", value = ""),
tableOutput("search_results"),
actionButton("submitbtn", "Submit")
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
observe({
if(input$submitbtn == 0){
return()
}else{
isolate({
output$search_results <- renderTable({
uncodes[grep(input$search_word, uncodes$V3, ignore.case = TRUE), 1:3]
})
})
}
})
}
ui <- fluidPage(
mainPanel(
textInput(inputId = "search_word", label = "Search UN codes for...", value = ""),
tableOutput("search_results"),
actionButton("submitbtn", "Submit")
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
observe({
if(input$submitbtn == 0){
return()
}else{
output$search_results <- renderTable({
isolate({
uncodes[grep(input$search_word, uncodes$V3, ignore.case = TRUE), 1:3]
})
})
}
})
}
ui <- fluidPage(
mainPanel(
textInput(inputId = "search_word", label = "Search UN codes for...", value = ""),
tableOutput("search_results"),
actionButton("submitbtn", "Submit")
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
observe({
if(input$submitbtn == 0){
return()
}else{
output$search_results <- renderTable({
isolate({
uncodes[grep(input$search_word, uncodes$V3, ignore.case = TRUE), 1:3]
})
})
}
})
}
ui <- fluidPage(
mainPanel(
textInput(inputId = "search_word", label = "Search UN codes for...", value = ""),
actionButton("submitbtn", "Submit"),
tableOutput("search_results")
)
)
shinyApp(ui = ui, server = server)
rm(list=ls())
library(shiny)
uncodes <- read.csv("~/Documents/World\ Bank/codebase/UNSPSC code translation/UNSPSC v171001new.csv", header = FALSE, encoding = "UTF-8")
# test <- gsub("\x", "", uncodes$V3)
server <- function(input, output) {
observe({
if(input$submitbtn == 0){
return()
}else{
print(input$search_word)
output$search_results <- renderTable({
isolate({
uncodes[grep(input$search_word, uncodes$V3, ignore.case = TRUE), 1:3]
})
})
}
})
}
ui <- fluidPage(
mainPanel(
textInput(inputId = "search_word", label = "Search UN codes for...", value = ""),
actionButton("submitbtn", "Submit"),
tableOutput("search_results")
)
)
shinyApp(ui = ui, server = server)
uncodes <- read.csv("~/Documents/World Bank/codebase//UNSPSC code translation/UNSPSC v171001.csv", header = FALSE, encoding = "UTF-8")
server <- function(input, output) {
observe({
if(input$submitbtn == 0){
return()
}else{
print(input$search_word)
output$search_results <- renderTable({
isolate({
uncodes[grep(input$search_word, uncodes$V3, ignore.case = TRUE), 1:3]
})
})
}
})
}
ui <- fluidPage(
mainPanel(
textInput(inputId = "search_word", label = "Search UN codes for...", value = ""),
actionButton("submitbtn", "Submit"),
tableOutput("search_results")
)
)
shinyApp(ui = ui, server = server)
rm(list=ls())
library(shiny)
#uncodes <- read.csv("~/Documents/World\ Bank/codebase/UNSPSC code translation/UNSPSC v171001new.csv", header = FALSE, encoding = "UTF-8")
# test <- gsub("\x", "", uncodes$V3)
uncodes <- read.csv("~/Documents/World Bank/codebase//UNSPSC code translation/UNSPSC v171001.csv", header = FALSE, encoding = "UTF-8")
server <- function(input, output) {
observe({
if(input$submitbtn == 0){
return()
}else{
output$search_results <- renderTable({
isolate({
uncodes[grep(input$search_word, uncodes$V3, ignore.case = TRUE), 1:3]
})
})
}
})
}
ui <- fluidPage(
mainPanel(
textInput(inputId = "search_word", label = "Search UN codes for...", value = ""),
actionButton("submitbtn", "Submit"),
tableOutput("search_results")
)
)
shinyApp(ui = ui, server = server)
library(datasets)
q1 <- lm(mpg~factor(cyl) + wt, mtcars)
summary(q1)
q2 <- lm(mpg~factor(cyl), mtcars)
summary(q2)
q3 <- lm(mpg~factor(cyl)*wt, mtcars)
summary(q3)
anova(q1, q3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x, y)
>influence.measures
?influence.measures
q5 <- lm(y, x)
hatvalues(q5)
q5 <- lm(y~x)
hatvalues(q5)
dfbetas(q5)
source('~/.active-rstudio-document', echo=TRUE)
library(manipulate)
manipulate(
plot(x, exp(beta0 + beta1 *x/ (1 + exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE)),
beta1 = slider(-2, 2, step = .1, initial = 2),
beta0 = slider(-2, 2, step = .1, initial = 0)
)
manipulate(
plot(x, exp(beta0 + beta1 *x)/ (1 + exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE),
beta1 = slider(-2, 2, step = .1, initial = 2),
beta0 = slider(-2, 2, step = .1, initial = 0)
)
install.packages("manipulate")
manipulate(
plot(x, exp(beta0 + beta1 *x)/ (1 + exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE),
beta1 = slider(-2, 2, step = .1, initial = 2),
beta0 = slider(-2, 2, step = .1, initial = 0)
)
library(mainpulate)
library(manipulate)
manipulate(
plot(x, exp(beta0 + beta1 *x)/ (1 + exp(beta0 + beta1*x)),
type = "l", lwd = 3, frame = FALSE),
beta1 = slider(-2, 2, step = .1, initial = 2),
beta0 = slider(-2, 2, step = .1, initial = 0)
)
?glm
swirl()
library(swirl)
swirl()
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family = "binomial", data = ravenData)
lodds <- predict(mdl, data.frame(ravenScore = c(0,3, 3)))
lodds <- predict(mdl, data.frame(ravenScore = c(0,3, 6)))
exp(lodds)/(1 + exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(.95, 1)
var(rpois(1000, 50))
ntx()
nxt()
head(hits)
class(hits[, 'date'])
as.integer(head(hits[, 'date']))
mdl <- glm(visits~date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[, 'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits~date, poisson, hits, offset = log(visits + 1))
mdl2 <- glm(simplystats~date, poisson, hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
data(Titanic)
head(Titanic)
dimnames (Titanic)
str(Titanic)
View(titanic)
View(Titanic)
Titanic$Class
Titanic[, 1]
Titanic[1]
str(Titanic)
Titanic
as.data.frame(Titanic)
margin.table(Titanic)
margin.table(Titanic, c(2, 4))
summary(Titanic)
getwd()
rm(list=ls())
library(MASS)
?shuttle
head(shuttle)
plot(use~wind, data = shuttle)
boxplot(use~wind, data = shuttle)
boxplot(table(shuttle$use, shuttle$wind))
table(shuttle$use, shuttle$wind)
(72/73)/(56/55)
q1 <- glm(use~wind, family = "binomial")
q1 <- glm(use~wind, family = "binomial", data = shuttle)
summary(q1)
p <- 2/3
odds <- p/(1-p)
with(shuttle(table(use, wind, magn)))
with(shuttle, table(use, wind, magn)))
with(shuttle, table(use, wind, magn))
as.data.frame(with(shuttle, table(use, wind, magn)))
log(odds)
mdlx <- glm(use ~ wind + magn, binomial, shuttle)
lodds2 <- predict(mdl2, data.frame(wind=shuttle$wind, magn=shuttle$magn))
mdl2 <- glm(use ~ wind + magn, binomial, shuttle)
lodds2 <- predict(mdl2, data.frame(wind=shuttle$wind, magn=shuttle$magn))
lodds2
summary(mdl2)
q3 <- glm(I(1-use)~wind, binomial, shuttle)
shuttle2 <- shuttle
shuttle2$use <- relevel(shuttle2$use)
relevel
?relevel
shuttle2$use <- relevel(shuttle2$use, "no")
shuttle2$use <- relevel(shuttle2$use, "No")
shuttle2$use <- relevel(shuttle2$use, 0)
str(shuttle2$use)
shuttle2$use <- relevel(shuttle2$use, "noauto")
q3 <- glm(~wind, binomial, shuttle2)
q3 <- glm(use~wind, binomial, shuttle2)
summary(q3)
summary(q1)
n<-500;x<-seq(0,4*pi,length=n);y<-sin(x)+rnorm(n,sd=.3)
knots<-seq(0,8*pi,length=20);
splineTerms<-sapply(knots,function(knot)(x>knot)*(x-knot))
xMat<-cbind(1,x,splineTerms)
yhat<-predict(lm(y~xMat-1)
)
yhat
head(InsectSprays)
q4 <- glm(count~spray, poisson, InsectSprays)
summary(q4)
q4 <- glm(count~factor(spray), poisson, InsectSprays)
summary(q4)
aggregate(count~spray, sum, InsectSprays)
?aggregate
aggregate(InsectSprays$count~InsectSprays$spray, sum)
head(InsectSprays)
aggregate(count~spray, sum, InsectSprays)
aggregate(count~spray, FUN = sum, data =InsectSprays)
174/184
5/6
9+9+7+5/(10+10+7+6)
(9+9+7+5)/(10+10+7+6)
install_github("slidify", "ramnathv")
library(devtools)
install_github("slidify", "ramnathv")
library(slidify)
author("GOT_survival_calc_elevator")
getwd()
setwd("~/Documents/courses/John Hopkins Data Science Specialization/Data Products/")
author("GOT_survival_calc_elevator")
getwd()
publish('christinabrady', 'GOT_survival_calculator')
publish('christinabrady', 'GOT_survival_cal_elevator')
publish('christinabrady', 'GOT_survival_cal_elevator')
publish('christinabrady', 'GOT_survival_cal_elevator')
